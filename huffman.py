###########################
# DO NOT MODIFY THIS PART #
# BUT YOU SHOULD READ IT  #
###########################
from heapq import *
from collections import Counter
s="" 
class Node:
    """
    Huffman tree node definition.
    """
    def __init__(self, symbol=None, count=0, left=None, right=None):
        """
        initialization
          symbol   : symbol to be coded
          count    : count of symbol
          left     : left child node
          right    : right child node
        """
        self.__left = left
        self.__right = right
        self.__symbol = symbol
        self.__count = count
        self.__code_word = ''

    def setLeft(self, l):
        """
        sets the left child of current node
        """
        self.__left = l
    
    def setRight(self, r):
        """
        sets the right child of current node
        """
        self.__right = r
    
    def getLeft(self):
        """
        returns the left child of current node
        """
        return self.__left
    
    def getRight(self):
        """
        returns the right child of current node
        """
        return self.__right

    def setSymbol(self, symbol):
        """
        sets coding symbol of current node
        """
        self.__symbol = symbol

    def getSymbol(self):
        """
        returns coding symbol of current node
        """
        return self.__symbol

    def setCount(self, count):
        """
        sets count of the symbol
        """
        self.__count = count

    def getCount(self):
        """
        returns count of the symbol
        """
        return self.__count
    
    def setCodeWord(self, code_word):
        """
        sets code-word of the symbol
        """
        self.__code_word = code_word

    def getCodeWord(self):
        """
        returns code-word of the symbol
        """
        return self.__code_word

    def __lt__(self, node):
        return self.__count < node.getCount()

    def __repr__(self):
        return "symbol: {}, count: {}, code-word: {}".format(self.__symbol, self.__count, self.__code_word)

###########################
# DO NOT MODIFY THIS PART #
# BUT YOU SHOULD READ IT  #
###########################



##############################
# FINISH THE BELOW FUNCTIONS #
##############################
def buildDictionary(message):
    word_dict = {}
    for i in message:
        if not i in word_dict:
            word_dict[i] = 0
        #count the frequency of every letter in the string
        word_dict[i] += 1
    return word_dict

def buildHuffmanTree(word_dict):
    """
    uses the word dictionary to generate a huffman tree using a min heap
      parameter:
        word_dict  : word dictionary generated by buildDictionary()
      return:
        root node of the huffman tree
    """

    tree = []
    tree = [Node(symbol,word_dict[symbol]) for symbol,word_dict[symbol] in word_dict.items()]
    #append nodes to the tree
    heapify(tree)
    while len(tree) > 1:
            n1 = heappop(tree)
            n2 = heappop(tree)
            count2=n1.getCount()+n2.getCount()
            #append internal nodes to the tree
            heappush(tree, Node(None, count2, n1, n2))
    heapify(tree)
    root = heappop(tree) 
    return root


def assignCodeWord(root, code_word=''):
    """
    recursively assigns code-word to the nodes in the huffman tree
      parameter:
        root       : root node of the huffman tree
        code_word  : code-word for the root node
      return:
        no return
    """
    recur(root)
def recur(node):
    if node!=None:
        t=node.getCodeWord()
        if node!=None and (node.getLeft()!=None):
            #assign codeword to the left children
            left=node.getLeft()
            left.setCodeWord(t+"0")
            recur(left)
        if node!=None and node.getRight()!=None:
            #assign codeword to the right children
            right=node.getRight()
            right.setCodeWord(t+"1")
            recur(right)
#the codeword array for encode message         
arr=[]
def recur2(letter,node):
    s=""
    if node!=None and letter ==str(node.getSymbol()):
        #append the codeword to the array id the single digit input letter is equal to the nodew symbol
        s=str(node.getCodeWord())
        arr.append(s)
        return s 
    
    else:
        #recursively calling the children until they match in the if statement
        if letter !=str(node.getSymbol()):
            if node!=None and (node.getLeft()!=None):
                left=node.getLeft()
                d=recur2(letter,left)
                
            if node!=None and (node.getRight()!=None):
                right=node.getRight()
                w=recur2(letter,right)
                
        
def huffmanEncode(message):
    """
    converts the input message into huffman code
      parameter:
        message    : input message string
      return:
        a tuple, the first element is the huffman code string for the input message,
        the second element is the huffman tree root node
    """
    #get the dict
    dict1=buildDictionary(message)
    #get the root
    root=buildHuffmanTree(dict1)
    #assign codeword to the node
    assignCodeWord(root,"")
    p=""
    for i in message:
        #get the codeword for every single digit
        recur2(i,root)

    for i in arr:
        #concat the elements in codeword array
        p=p+str(i)
    print(p)

    return p
        
def huffmanDecode(message, huffman_tree):
    """
    decode the message
      parameter:
        message      : input huffman code string
        huffman_tree : huffman tree root node
      return:
        decoded message
    """
    cur = huffman_tree
    chararray = []
    for c in message:
        if c == '0' and cur.getLeft()!=None:
            #move left
            cur =cur.getLeft()
        elif cur.getRight()!=None:
            #move right
            cur = cur.getRight()
        # leave node
        if cur.getLeft()==None and cur.getRight()==None:
            chararray.append(cur.getSymbol())
            cur = huffman_tree
    
    #Print final array
    decodem=""
    for i in chararray:
        decodem=decodem+str(i)
    return decodem
            

def main():
    """
    main process goes here
    """
    m = input("Enter the message: ") 
    s=huffmanEncode(m)
    print("the encode message is "+s)
    d=buildDictionary(m)
    tree=buildHuffmanTree(d)
    decode=huffmanDecode(s,tree)
    print("the decode message is "+str(decode))


##############################
# FINISH THE ABOVE FUNCTIONS #
##############################


###########################
# DO NOT MODIFY THIS PART #
###########################
if __name__ == "__main__":
    main()
###########################
# DO NOT MODIFY THIS PART #
###########################